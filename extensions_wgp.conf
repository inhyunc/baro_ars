; ********************************************************************************
; *                                                                              *
; * WGP(WinGlobalPay:윈글로벌페이)                                               *
; *                                                                              *
; ********************************************************************************

[wgp_main]

exten => _X.,1, Noop([wgp_main] Recv Call [${CALLERID(ANI)} --> ${CALLERID(DNID)}] From [${CHANNEL(peerip)}] )

	same => n, Ringing()


	; ********************************************************************************
	; 1. 공통 정보 초기화                                                            *
	; ********************************************************************************
	same => n(wgp_initial), Set(ErrorCode=wgp_initial)
	same => n, GoSub(wgp_InitCommInfo,s,1)

	same => n, Set(m_PhoneNumber=${m_CALLER})			; // 고객 전화 번호
	same => n, Set(m_ArsLineNumber=${m_CALLEE})			; // ARS 회선 번호

	same => n, Answer()

	; ********************************************************************************
	; 2. 카드 정보 검색                                                              *
	; ********************************************************************************
	same => n(wgp_get_card_inform), Set(ErrorCode=wgp_get_card_inform)
	same => n, GoSub(wgp_GetCardInfo,s,1(${ErrorCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?wgp_set_card_inform)	; // 카드 정보 입력
	same => n, GotoIf($[${GOSUB_RETVAL} = 2]?wgp_save_card_inform)	; // 카드 정보 저장
	same => n, GotoIf($[${GOSUB_RETVAL} = 3]?wgp_del_card_inform)	; // 카드 정보 삭제
	same => n, GotoIf($[${GOSUB_RETVAL} = 4]?wgp_req_pay_cancel)	; // 결제 취소 신청
	same => n, Goto(wgp_Finish,1)

	; ********************************************************************************
	; 3. 신용카드 번호, 유효기간 입력후 결제 시도                                    *
	; ********************************************************************************
	same => n(wgp_set_card_inform), Set(ErrorCode=wgp_set_card_inform)
	same => n, GoSub(wgp_SetCardInform,s,1(${ErrorCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?wgp_GoodBye,1:wgp_Finish,1)

	; ********************************************************************************
	; 4. 신용카드 번호와 유효기간 정보 저장                                          *
	; ********************************************************************************
	same => n(wgp_save_card_inform), Set(ErrorCode=wgp_save_card_inform)
	same => n, GoSub(wgp_SaveCardInform,s,1(${ErrorCode},2))	; // web_save
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?wgp_GoodBye,1:wgp_Finish,1)

	; ********************************************************************************
	; 5. 등록된 신용카드 번호 삭제                                                   *
	; ********************************************************************************
	same => n(wgp_del_card_inform), Set(ErrorCode=wgp_del_card_inform)
	same => n, GoSub(wgp_DelCardInform,s,1(${ErrorCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?wgp_GoodBye,1:wgp_Finish,1)

	; ********************************************************************************
	; 6. 결제 취소 신청                                                              *
	; ********************************************************************************
	same => n(wgp_req_pay_cancel), Set(ErrorCode=wgp_req_pay_cancel)
	same => n, GoSub(wgp_ReqPayCancel,s,1(${ErrorCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?wgp_GoodBye,1:wgp_Finish,1)



	; ********************************************************************************
	;                                                                                *
	; WGP 서비스 종료                                                                *
	;                                                                                *
	; ********************************************************************************
exten => wgp_GoodBye, 1, Log(NOTICE,[${m_CALLER} --> ${m_CALLEE}] [wgp_GoodBye] ERR=[${ErrorCode}])
	same => n, Playback(${comDIR}/COMM_001)			; 이용해 주셔서 감사합니다.
	same => n, Hangup()

exten => wgp_Finish, 1, Log(NOTICE,[${m_CALLER} --> ${m_CALLEE}] [wgp_Finish] ERR=[${ErrorCode}])
	same => n, Hangup()

exten => h, 1, Log(NOTICE,[${m_CALLER} --> ${m_CALLEE}] [wgp_Hangup] ERR=[${ErrorCode}])
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; comm_CheckValidDigit(입력 정보 유효성 확인)                                    *
;  - 입력 디지트가 숫자로만 구성되어 있는지 여부 확인                            *
;                                                                                *
; ********************************************************************************

[comm_CheckValidDigit]
exten => s, 1, Noop(wgp_check_dgt from [${ARG1}/${ARG2}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode
	same => n, Set(LOCAL(DGT)=${ARG2})				; // Dgt
	same => n, Set(LOCAL(max_length)=0)
	same => n, Set(LOCAL(i)=0)

	same => n, Set(max_length=${LEN(${DGT})})

	same => n(compare), Set(C_DGT=${DGT:${i}:1})
	same => n, GotoIf($["${C_DGT}" = "*"]?wrong)
	same => n, Set(i=$[${i}+1])
	same => n, GotoIf($[${i} < ${max_length}]?compare:succ)

	same => n(succ), Return(1)
	same => n(wrong), Return(0)


; ********************************************************************************
;                                                                                *
; wgp_InitCommInfo(공통 데이타 초기화)                                           *
;                                                                                *
; ********************************************************************************

[wgp_InitCommInfo]
exten => s, 1, Set(CHANNEL(language)=kr)
	same => n, Set(m_CALLER=${CALLERID(ANI)})
	same => n, Set(m_CALLEE=${CALLERID(DNID)})
	same => n, Set(wavDIR=wgp)
	same => n, Set(agiDIR=wgp)
	same => n, Set(comDIR=comm)

	same => n, Set(RESULT=)
	same => n, Set(m_PhoneNumber=)				; // 고객 전화 번호
	same => n, Set(m_ArsineNumber=)				; // ARS 회선 번호
	same => n, Set(m_CreditNumberType=)			; // 신용카드 번호 자릿수: 16,15,14,0
	same => n, Set(m_PayAmount=)				; // 결제 금액
	same => n, Set(m_CreditCardNumber=)			; // 고객이 직접 입력한 카드 번호
	same => n, Set(m_ValidThru=)				; // 고객이 ARS에서 입력한 신용카드 유효 기간
	same => n, Set(m_AuthNumber=)				; // 결제 승인 번호, 결제 취소시 사용

	same => n, Set(m_1_SectNumber=)				; // 고객이 신용카드 첫번째 칸에 입력한 번호
	same => n, Set(m_2_SectNumber=)				; // 고객이 신용카드 두번째 칸에 입력한 번호
	same => n, Set(m_3_SectNumber=)				; // 고객이 신용카드 세번째 칸에 입력한 번호
	same => n, Set(m_4_SectNumber=)				; // 고객이 신용카드 네번째 칸에 입력한 번호

	same => n, Set(m_1_SectDgtCnt=0)			; // 신용카드 첫번째 칸에 입력할 번호 갯수
	same => n, Set(m_2_SectDgtCnt=0)			; // 신용카드 두번째 칸에 입력할 번호 갯수
	same => n, Set(m_3_SectDgtCnt=0)			; // 신용카드 세번째 칸에 입력할 번호 갯수
	same => n, Set(m_4_SectDgtCnt=0)			; // 신용카드 네번째 칸에 입력할 번호 갯수

	same => n, Set(m_CVC_Number=)				; // ARS에서 입력한 CVC 번호
	same => n, Set(m_CreditPasswd=)				; // ARS에서 입력한 카드 비번

	same => n, Return





; ********************************************************************************
;                                                                                *
; wgp_AgiGetCardInfo                                                             *
;   발신번호와 착신번호를 검색하여                                               *
;   - 윈글로벌페이 결제 신청이 접수 여부 확인                                    *
;   - 신용카드 번호 유형 뷴류 : 16자리, 15자리, 14자리                           *
;   정보를 검색하여 서비스 진행 여부를 결정한다.                                 *
;   1) input  :                                                                  *
;      - m_PhoneNumber   : 발신번호=고객 전화 번호                               *
;      - m_ArsLineNumber : 착신번호=ARS 회선 번호                                *
;   2) output :                                                                  *
;      - m_CreditNumberType : 신용카드 번호 자릿수                               *
;            16= 신용카드 번호 16자리,                                           *
;            15= 신용카드 번호 15자리, 아메리칸 익스프레스 카드                  *
;            14= 신용카드 번호 14자리, 다이너스 카드                             *
;            0=데이타베이스에 저장된 카드번호 이용                               *
;      - m_PayAmount : 결제 금액. 금액이 0원이면 서비스 제공하지 않음.           *
;      - m_1_SectCnt : 신용카드 첫번째 부분에서 입력받아야 되는 번호 갯수        *
;      - m_2_SectCnt : 신용카드 두번째 부분에서 입력받아야 되는 번호 갯수        *
;      - m_3_SectCnt : 신용카드 세번째 부분에서 입력받아야 되는 번호 갯수        *
;      - m_4_SectCnt : 신용카드 네번째 부분에서 입력받아야 되는 번호 갯수        *
;      - RESULT : 정보 검색 결과                                                 *
;                 1000=결제 신청 정보 있음                                       *
;                 1001=신용카드 정보 저장                                        *
;                 1002=저장된 신용카드 정보 삭제                                 *
;                 1003=결제 취소                                                 *
;                 2003=신청된 결제 정보 없음                                     *
;                 2004=저장된 신용 카드 번호 없음.                               *
;                 2004=결제 신청 유효 시간 초과                                  *
;                 8888=db_conn_fail                                              *
;                 9999=알수없는 에라 발생                                        *
;                                                                                *
; ********************************************************************************

[wgp_AgiGetCardInfo]
exten => s, 1, Noop(wgp_AgiGetCardInfo from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})					; // ErrCode

	same => n, AGI(${agiDIR}/wgp_GetCardInfo.php)
	same => n, Log(NOTICE,[${m_CALLER}] wgp_GetCardInfo.php : AGI=[${AGISTATUS}] RLT=[${RESULT}] m_PhoneNumber=[${m_PhoneNumber}] m_ArsLineNumber=[${m_ArsLineNumber}] m_CreditNumberType=[${m_CreditNumberType}] m_PayAmount=[${m_PayAmount}] m_1_SectCnt=[${m_1_SectCnt}] m_2_SectCnt=[${m_2_SectCnt}] m_3_SectCnt=[${m_3_SectCnt}] m_4_SectCnt=[${m_4_SectCnt}] )

	same => n, ExecIf($["${AGISTATUS}"!="SUCCESS"]?Set(RESULT=9093))	; // 외부 장치에 접속하지 못하여, ~~~~~~~~~.
	same => n, Return(${RESULT})						; // AGI로부터 수신된 결과 


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AgiGetCardInfo/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_AgiCreditCardPayReq                                                        *
;   발신번호, 착신번호, 신용카드 번호, 유효기간, CVC(CID) 번호를 입력하여        *
;   고객의 신용카드 결제를 요청한다.                                             *
;                                                                                *
;   1) input  :                                                                  *
;      - m_PhoneNumber : 고객 전화 번호                                          *
;      - m_ArsLineNumber : ARS 회선 번호                                         *
;      - m_1_SectNumber : 고객이 ARS에서 입력한 신용카드 첫번째 부분 번호        *
;      - m_1_SectNumber : 고객이 ARS에서 입력한 신용카드 첫번째 부분 번호        *
;      - m_2_SectNumber : 고객이 ARS에서 입력한 신용카드 첫번째 부분 번호        *
;      - m_3_SectNumber : 고객이 ARS에서 입력한 신용카드 첫번째 부분 번호        *
;      - m_ValidThru : 고객이 ARS에서 입력한 신용카드 유효 기간                  *
;                                                                                *
;   2) output :                                                                  *
;      - RESULT : AGI 수행 결과                                                  *
;                 1100=결제 성공                                                 *
;                 2101=결제 실패                                                 *
;                 2102=유효기간 만료                                             *
;                 2103=미등록 카드                                               *
;                 2104=잘못된 카드번호                                           *
;                 2105=승인거절-한도초과                                         *
;                 2106=승인거절-거래정지                                         *
;                 8888= db conn fail                                             *
;                 9999= 알려지지 않은 에라 발생                                  *
;                                                                                *
; ********************************************************************************

[wgp_AgiCreditCardPayReq]
exten => s, 1, Noop(wgp_AgiCreditCardPayReq from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})					; // ErrCode

	same => n, AGI(${agiDIR}/wgp_CreditCardPaymentReq.php)
	same => n, Log(NOTICE,[${m_CALLER}] wgp_CreditCardPaymentReq.php : AGI=[${AGISTATUS}] RLT=[${RESULT}] m_PhoneNumber=[${m_PhoneNumber}] m_ArsLineNumber=[${m_ArsLineNumber}] m_1_SectNumber=[${m_1_SectNumber}] m_2_SectNumber=[${m_2_SectNumber}] m_3_SectNumber=[${m_3_SectNumber}] m_4_SectNumber=[${m_4_SectNumber}] m_ValidThru=[${m_ValidThru}] )

	same => n, ExecIf($["${AGISTATUS}"!="SUCCESS"]?Set(RESULT=9093))	; // 외부 장치에 접속하지 못하여, ~~~~~~~~~.
	same => n, Return(${RESULT})						; // AGI로부터 수신된 결과 


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AgiCreditCardPayReq/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_AgiCheckCreditCard                                                         *
;   고객의 신용카드가 등록되어 있는지 여부 확인                                  *
;   1) input  :                                                                  *
;      - m_PhoneNumber                                                           *
;      - m_1_SectNumber                                                          *
;      - m_2_SectNumber                                                          *
;      - m_3_SectNumber                                                          *
;      - m_4_SectNumber                                                          *
;      - m_ValidThru                                                             *
;                                                                                *
;   2) output :                                                                  *
;      - m_CreditCardNumber : 고객의 신용카드 번호                               *
;      - RESULT : 정보 검색 결과                                                 *
;                 1010= DB에 저장되어 있는 카드번호                              *
;                 1011= DB에 저장되어 있지 않은 카드번호                         *
;                                                                                *
; ********************************************************************************

[wgp_AgiCheckCreditCard]
exten => s, 1, Noop(wgp_AgiCheckCreditCard from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})					; // ErrCode

	same => n, AGI(${agiDIR}/wgp_CheckCreditCardInform.php)
	same => n, Log(NOTICE,[${m_CALLER}] wgp_CheckCreditCardInform.php : AGI=[${AGISTATUS}] RLT=[${RESULT}] m_1_SectNumber=[${m_1_SectNumber}] m_2_SectNumber=[${m_2_SectNumber}] m_3_SectNumber=[${m_3_SectNumber}] m_4_SectNumber=[${m_4_SectNumber}] m_ValidThru=[${m_ValidThru}] m_CreditCardNumber=[${m_CreditCardNumber}] )

	same => n, ExecIf($["${AGISTATUS}"!="SUCCESS"]?Set(RESULT=9093))	; // 외부 장치에 접속하지 못하여, ~~~~~~~~~.
	same => n, Return(${RESULT})						; // AGI로부터 수신된 결과 


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AgiCheckCreditCard/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_AgiSaveCreditCardInform                                                    *
;   고객의 요청을 받아 신용카드 정보를 DB에 저장한다.                            *
;   신용카드 정보를 DB에 저장하여, 이후에는 정보 입력없이 결제를 하기위함이다.   *
;   1) input  :                                                                  *
;      - m_PhoneNumber                                                           *
;      - m_ArsLineNumber                                                         *
;      - m_CreditCardNumber : 고객의 신용카드 번호                               *
;      - m_ValidThru                                                             *
;                                                                                *
;   2) output :                                                                  *
;      - RESULT : 정보 검색 결과                                                 *
;                 1200= save_succ                                                *
;                 2201= save_fail                                                *
;                 2202= already_save                                             *
;                 2203= card_number_none                                         *
;                 2204= valid_thru_none                                          *
;                 8888= db conn fail                                             *
;                 9999= 알려지지 않은 에라 발생                                  *
;                                                                                *
; ********************************************************************************

[wgp_AgiSaveCreditCardInform]
exten => s, 1, Noop(wgp_AgiSaveCreditCardInform from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})					; // ErrCode

	same => n, AGI(${agiDIR}/wgp_SaveCreditCardInform.php)
	same => n, Log(NOTICE,[${m_CALLER}] wgp_SaveCreditCardInform.php : AGI=[${AGISTATUS}] RLT=[${RESULT}] m_PhoneNumber=[${m_PhoneNumber}] m_ArsLineNumber=[${m_ArsLineNumber}] m_CreditCardNumber=[${m_CreditCardNumber}] m_ValidThru=[${m_ValidThru}] )

	same => n, ExecIf($["${AGISTATUS}"!="SUCCESS"]?Set(RESULT=9093))	; // 외부 장치에 접속하지 못하여, ~~~~~~~~~.
	same => n, Return(${RESULT})						; // AGI로부터 수신된 결과 


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AgiSaveCreditCardInform/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_AgiDeleteCreditCardInform                                                  *
;   고객이 등록한 신용카드 정보를 고객의 요청으로 삭제한다.                      *
;   1) input  :                                                                  *
;      - m_PhoneNumber                                                           *
;      - m_ArsLineNumber                                                         *
;      - m_CreditCardNumber                                                      *
;      - m_ValidThru                                                             *
;                                                                                *
;   2) output :                                                                  *
;      - RESULT : 정보 검색 결과                                                 *
;                 1200= delete_succ                                              *
;                 2301= delete_fail                                              *
;                 2303= card_number_none                                         *
;                 2304= valid_thru_none                                          *
;                 8888= db conn fail                                             *
;                 9999= 알려지지 않은 에라 발생                                  *
;                                                                                *
; ********************************************************************************

[wgp_AgiDeleteCreditCardInform]
exten => s, 1, Noop(wgp_AgiDeleteCreditCardInform from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})					; // ErrCode

	same => n, AGI(${agiDIR}/wgp_DeleteCreditCardInform.php)
	same => n, Log(NOTICE,[${m_CALLER}] wgp_SaveCreditCardInform.php : AGI=[${AGISTATUS}] RLT=[${RESULT}] m_PhoneNumber=[${m_PhoneNumber}] m_ArsLineNumber=[${m_ArsLineNumber}] m_CreditCardNumber=[${m_CreditCardNumber}] m_ValidThru=[${m_ValidThru}] )

	same => n, ExecIf($["${AGISTATUS}"!="SUCCESS"]?Set(RESULT=9093))	; // 외부 장치에 접속하지 못하여, ~~~~~~~~~.
	same => n, Return(${RESULT})						; // AGI로부터 수신된 결과 


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AgiDeleteCreditCardInform/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_AgiCancelCardAuthInform                                                    *
;   고객이 등록한 신용카드 정보를 고객의 요청으로 삭제한다.                      *
;   1) input  :                                                                  *
;      - m_PhoneNumber                                                           *
;      - m_ArsLineNumber                                                         *
;      - m_CreditCardNumber                                                      *
;      - m_ValidThru                                                             *
;      - m_AuthNumber                                                            *
;                                                                                *
;   2) output :                                                                  *
;      - RESULT : 정보 검색 결과                                                 *
;                 1400= cancel_succ                                              *
;                 2401= cancel_fail                                              *
;                 2402= auth_number_none                                         *
;                 2403= card_number_none                                         *
;                 2404= valid_thru_none                                          *
;                 8888= db conn fail                                             *
;                 9999= 알려지지 않은 에라 발생                                  *
;                                                                                *
; ********************************************************************************

[wgp_AgiCancelCardAuthInform]
exten => s, 1, Noop(wgp_AgiCancelCardAuthInform from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})

	same => n, AGI(${agiDIR}/wgp_CancelAuthInform.php)
	same => n, Log(NOTICE,[${m_CALLER}] wgp_CancelAuthInform.php : AGI=[${AGISTATUS}] RLT=[${RESULT}] m_PhoneNumber=[${m_PhoneNumber}] m_ArsLineNumber=[${m_ArsLineNumber}] m_CreditCardNumber=[${m_CreditCardNumber}] m_ValidThru=[${m_ValidThru}] m_AuthNumber=[${m_AuthNumber}] )

	same => n, ExecIf($["${AGISTATUS}"!="SUCCESS"]?Set(RESULT=9093))	; // 외부 장치에 접속하지 못하여, ~~~~~~~~~.
	same => n, Return(${RESULT})						; // AGI로부터 수신된 결과 


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AgiCancelCardAuthInform/Hangup ERR=[${ErrorCode} ${ErrCode}])
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_PlayAnm(AGI 수행 결과 및 그외에  대한 안내 멘트)                           *
;                                                                                *
; ********************************************************************************

[wgp_PlayAnm]
exten => s, 1, Noop(wgp_PlayAm, [${ARG1} / ${ARG2}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode
	same => n, Set(LOCAL(rlt)=${ARG2})				; // agi_result
	same => n, Set(LOCAL(FN)=WGP_000)				; // 1초 묵음: 알려지지 않은 에라발생시

	same => n, ExecIf($[${rlt} < 1000]?Set(rlt=9092)		; undefined_error
	same => n, GotoIf($[${rlt} >= 9000]?msg_err)

	same => n(msg_10), GotoIf($[${rlt} >= 1100]?msg_1x)
	same => n, ExecIf($[${rlt} = 1000]?Set(FN=WGP_040))		; 신청된 결제 정보가 있습니다.
	same => n, ExecIf($[${rlt} = 1001]?Set(FN=WGP_041))		; 카드 정보를 데이터베이스에 등록합니다.
	same => n, ExecIf($[${rlt} = 1002]?Set(FN=WGP_042))		; 데이터베이스에 등록된 카드 정보를 삭제합니다.
	same => n, ExecIf($[${rlt} = 1003]?Set(FN=WGP_043))		; 결제 취소를 신청하셨습니다.
	same => n, ExecIf($[${rlt} = 1010]?Set(FN=WGP_050))		; 이미 등록된 카드입니다.
	same => n, ExecIf($[${rlt} = 1011]?Set(FN=WGP_051))		; 등록된 카드가 아닙니다.
	same => n, Goto(play)

	same => n(msg_1x), GotoIf($[${rlt} >= 2000]?msg_20)
	same => n, ExecIf($[${rlt} = 1100]?Set(FN=WGP_060))		; 결제되었습니다.
	same => n, ExecIf($[${rlt} = 1200]?Set(FN=WGP_070))		; 저장되었습니다.
	same => n, ExecIf($[${rlt} = 1300]?Set(FN=WGP_080))		; 삭제되었습니다.
	same => n, ExecIf($[${rlt} = 1400]?Set(FN=WGP_090))		; 결제가 취소되었습니다
	same => n, Goto(play)

	same => n(msg_20), GotoIf($[${rlt} >= 2100]?msg_21)
	same => n, ExecIf($[${rlt} = 2003]?Set(FN=WGP_044))		; 신청된 결제 정보가 없습니다.
	same => n, ExecIf($[${rlt} = 2004]?Set(FN=WGP_045))		; 저장된 신용 카드 번호가 없습니다.
	same => n, ExecIf($[${rlt} = 2005]?Set(FN=WGP_046))		; 결제 신청후, 유효 시간이 초과되어 결제가 거절되었습니다.
	same => n, Goto(play)

	same => n(msg_21), GotoIf($[${rlt} >= 2200]?msg_22)
	same => n, ExecIf($[${rlt} = 2101]?Set(FN=WGP_061))		; 결제하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2102]?Set(FN=WGP_062))		; 유효 기간이 만료된 카드입니다.
	same => n, ExecIf($[${rlt} = 2103]?Set(FN=WGP_063))		; 카드사에 등록된 카드가 아닙니다.
	same => n, ExecIf($[${rlt} = 2104]?Set(FN=WGP_064))		; 잘못된 카드 번호입니다.
	same => n, ExecIf($[${rlt} = 2105]?Set(FN=WGP_065))		; 한도가 초과되어 승인이 거절되었습니다.
	same => n, ExecIf($[${rlt} = 2106]?Set(FN=WGP_066))		; 거래 정지가 된 카드이어서, 승인이 거절되었습니다.
	same => n, Goto(play)

	same => n(msg_22), GotoIf($[${rlt} >= 2300]?msg_23)
	same => n, ExecIf($[${rlt} = 2201]?Set(FN=WGP_071))		; 저장하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2202]?Set(FN=WGP_072))		; 이미 저장된 카드 정보입니다.
	same => n, ExecIf($[${rlt} = 2203]?Set(FN=WGP_073))		; 카드 번호가 없어, 저장하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2204]?Set(FN=WGP_074))		; 유효 기간이 없어, 저장하지 못했습니다.
	same => n, Goto(play)

	same => n(msg_23), GotoIf($[${rlt} >= 2400]?msg_24)
	same => n, ExecIf($[${rlt} = 2301]?Set(FN=WGP_081))		; 삭제하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2303]?Set(FN=WGP_082))		; 카드 번호가 없어, 삭제하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2304]?Set(FN=WGP_083))		; 유효 기간이 없어, 삭제하지 못했습니다.
	same => n, Goto(play)

	same => n(msg_24), GotoIf($[${rlt} >= 2500]?msg_err)
	same => n, ExecIf($[${rlt} = 2401]?Set(FN=WGP_091))		; 결제를 취소하지 못했습니다
	same => n, ExecIf($[${rlt} = 2402]?Set(FN=WGP_092))		; 승인 번호가 없어, 결제를 취소하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2403]?Set(FN=WGP_093))		; 카드 번호가 없어, 결제를 취소하지 못했습니다.
	same => n, ExecIf($[${rlt} = 2404]?Set(FN=WGP_094))		; 유효 기간이 없어, 결제를 취소하지 못했습니다.
	same => n, Goto(play)


	same => n(msg_err), Set(FN=COMM_000)				; // 1초 묵음: 알려지지 않은 에라발생시
	same => n, ExecIf($[${rlt} = 8888]?Set(FN=COMM_901))		; 외부장치와 접속이 원할하지 않아,서비스를 진행할수 없습니다.
	same => n, ExecIf($[${rlt} = 9999]?Set(FN=COMM_902))		; 알려지지 않은 장애가 발생하여, 서비스가 중단되었습니다.
	same => n, ExecIf($[${rlt} = 9092]?Set(FN=COMM_903))		; 서버로부터 알 수 없는 정보를 수신하여, 서비스가 중단 되었습니다.
	same => n, ExecIf($[${rlt} = 9093]?Set(FN=COMM_900))		; 외부 장치에 접속하지 못하여, 서비스를 진행할 수 없습니다.
	same => n, ExecIf($[${rlt} = 9094]?Set(FN=COMM_906))		; 서버로부터 수신한 정보에 오류가 있어, 서비스를 중단합니다.
	same => n, ExecIf($[${rlt} = 9084]?Set(FN=COMM_004))		; 서비스 준비중입니다. 다음에 이용해 주세요.
	same => n, Playback(${comDIR}/${FN})
	same => n, Return

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(play), Playback(${wavDIR}/${FN})
	same => n, Return


exten => h,1, Log(NOTICE,[${m_CALLER} --> ${m_CALLEE}] psn_PlayAnm/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_GetCardInfo                                                                *
;   출금 신청을 한 고객에 대한 정보를 검색                                       *
;   1) input  : none                                                             *
;   2) output :                                                                  *
;      - m_CreditNumberType : 신용카드 번호 자릿수                               *
;      - m_PayAmount : 결제 금액                                                 *
;      - m_1_SectCnt : 신용카드 첫부분에서 입력받아야 하는 번호 갯수             *
;      - m_2_SectCnt : 신용카드 첫부분에서 입력받아야 하는 번호 갯수             *
;      - m_3_SectCnt : 신용카드 첫부분에서 입력받아야 하는 번호 갯수             *
;      - m_4_SectCnt : 신용카드 첫부분에서 입력받아야 하는 번호 갯수             *
;                                                                                *
; ********************************************************************************

[wgp_GetCardInfo]
exten => s,1,Noop(wgp_GetCardInfo from [${ARG1}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})			; // ErrCode

	; ----------------------------------------
	;
	; ----------------------------------------
	same => n, GoSub(wgp_AgiGetCardInfo,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 1000]?WGCI_agi_succ)	; // 정보 입력
	same => n, GotoIf($[${GOSUB_RETVAL} = 1001]?WGCI_agi_succ)	; // 정보 저장
	same => n, GotoIf($[${GOSUB_RETVAL} = 1002]?WGCI_agi_succ)	; // 정보 삭제
	same => n, GotoIf($[${GOSUB_RETVAL} = 1003]?WGCI_agi_succ)	; // 결제 취소 신청
	same => n, GotoIf($[${GOSUB_RETVAL} = 2003]?WGCI_agi_fail)	; // 신청된 결제 정보가 없습니다.
	same => n, GotoIf($[${GOSUB_RETVAL} = 2004]?WGCI_agi_fail)	; // 저장된 신용 카드 번호가 없습니다.
	same => n, Goto(WGCI_agi_fail)					; // undefine_err

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGCI_agi_succ), Set(ErrCode=WGCI_agi_succ)
	same => n, GotoIf($[${LEN(${m_CreditNumberType})} = 0]?WGCI_data_err)	; // 검색 정보 없음
	same => n, GotoIf($[${LEN(${m_PayAmount})} = 0]?WGCI_data_err)		; // 검색 정보 없음

	same => n, ExecIf($[${LEN(${m_1_SectCnt})} = 0]?Set(m_1_SectCnt=0))
	same => n, ExecIf($[${LEN(${m_2_SectCnt})} = 0]?Set(m_2_SectCnt=0))
	same => n, ExecIf($[${LEN(${m_3_SectCnt})} = 0]?Set(m_3_SectCnt=0))
	same => n, ExecIf($[${LEN(${m_4_SectCnt})} = 0]?Set(m_4_SectCnt=0))

	same => n, ExecIf($[${m_CreditNumberType} = 0]?Set(m_1_SectCnt=0))
	same => n, ExecIf($[${m_CreditNumberType} = 0]?Set(m_2_SectCnt=0))
	same => n, ExecIf($[${m_CreditNumberType} = 0]?Set(m_3_SectCnt=0))
	same => n, ExecIf($[${m_CreditNumberType} = 0]?Set(m_4_SectCnt=0))

	same => n, GotoIf($[${m_CreditNumberType} = 16]?WGCI_continue)	; // 검색 정보 없음
	same => n, GotoIf($[${m_CreditNumberType} = 15]?WGCI_continue)	; // 검색 정보 없음
	same => n, GotoIf($[${m_CreditNumberType} = 14]?WGCI_continue)	; // 검색 정보 없음
	same => n, GotoIf($[${m_CreditNumberType} =  0]?WGCI_continue)	; // 검색 정보 없음
	same => n, Goto(WGCI_data_err)

	same => n(WGCI_continue), Set(ErrCode=WGCI_continue)
	same => n, GotoIf($[${GOSUB_RETVAL} = 1000]?WGCI_1)		; // 정보 입력
	same => n, GotoIf($[${GOSUB_RETVAL} = 1001]?WGCI_2)		; // 정보 저장
	same => n, GotoIf($[${GOSUB_RETVAL} = 1002]?WGCI_3)		; // 정보 삭제
	same => n, GotoIf($[${GOSUB_RETVAL} = 1003]?WGCI_4)		; // 결제 취소 신청
	same => n, Goto(WGCI_fail)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGCI_agi_fail), Set(ErrCode=WGCI_agi_fail)
	same => n, GoSub(wgp_PlayAnm,s,1(${ErrCode},${GOSUB_RETVAL}))
	same => n, Goto(WGCI_fail)

	same => n(WGCI_data_err), Set(ErrCode=WGCI_data_err)
	same => n, GoSub(wgp_PlayAnm,s,1(${ErrCode},9094))
	same => n, Goto(WGCI_fail)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGCI_1), Return(1)
	same => n(WGCI_2), Return(2)
	same => n(WGCI_3), Return(3)
	same => n(WGCI_4), Return(4)
	same => n(WGCI_fail), Return(0)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_GetCardInfo/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_GetCardNumber                                                              *
;   고객이 신용카드 번호의 마지막 4/5 자리 정보를 입력하도록 한다.               *
;   1) input  : none                                                             *
;   2) output : m_1_SectNumber m_2_SectNumber m_3_SectNumber m_4_SectNumber      *
;                                                                                *
; ********************************************************************************

[wgp_GetCardNumber]
exten => s,1,Noop(wgp_GetCardNumber from [${ARG1}/${ARG2}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode
	same => n, Set(LOCAL(SELNUM)=)
	same => n, Set(LOCAL(countWRONG)=0)
	same => n, Set(LOCAL(countSHORT)=0)
	same => n, Set(LOCAL(countERROR)=0)
	same => n, Set(LOCAL(length)=0)
	same => n, Set(LOCAL(F1)=WGP_000)
	same => n, Set(LOCAL(F2)=WGP_000)
	same => n, Set(LOCAL(FN)=WGP_011)
	same => n, Set(LOCAL(seq_num)=1)

	same => n, GotoIf($[${m_CreditNumberType} =  0]?WGCN_succ)

	same => n, Playback(${wavDIR}/WGP_011)				; 신용 카드 번호는 ARS 안내멘트에 따라 입력하시면 됩니다.

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	
	same => n(WGCN_init), Set(ErrCode=WGCN_init)
	same => n, Set(SELNUM=)
	same => n, Set(length=0)
	same => n, Set(countWRONG=0)
	same => n, Set(countSHORT=0)
	same => n, Set(countERROR=0)

	same => n, ExecIf($[${seq_num} = 1]?Set(length=${m_1_SectCnt}))
	same => n, ExecIf($[${seq_num} = 2]?Set(length=${m_2_SectCnt}))
	same => n, ExecIf($[${seq_num} = 3]?Set(length=${m_3_SectCnt}))
	same => n, ExecIf($[${seq_num} = 4]?Set(length=${m_4_SectCnt}))
	same => n, GotoIf($[${length} = 0]?next)

	same => n, Wait(0.5)
	same => n, ExecIf($[${seq_num} = 1]?Set(F1=WGP_012_1))		; 카드번호 첫번째 부분의.
	same => n, ExecIf($[${seq_num} = 2]?Set(F1=WGP_012_2))		; 카드번호 두번째 부분의.
	same => n, ExecIf($[${seq_num} = 3]?Set(F1=WGP_012_3))		; 카드번호 세번째 부분의.
	same => n, ExecIf($[${seq_num} = 4]?Set(F1=WGP_012_4))		; 카드번호 네번째 부분의.

	same => n, Set(F2=WGP_013_9)					; 나머지 번호를 입력하세요.
	same => n, ExecIf($[${length} < 9]?Set(F2=WGP_013_${length}))	; 뒤 x자리 번호를 입력하세요.

	same => n, Set(FN=${SPRINTF(${wavDIR}/${F1}&${wavDIR}/${F2})})

	same => n(WGCN_recvDgt), Set(ErrCode=WGCN_recvDgt)
	same => n, GotoIf($[${length} = 0]?WGCN_check_seq)
	same => n, Read(SELNUM,${FN},${length},n,3,5)			;
	                                                 		;
	same => n, GotoIf($[${LEN(${SELNUM})} = 0]?WGCN_not_enter)	; // 미입력
	same => n, GotoIf($[${LEN(${SELNUM})} < ${length}]?WGCN_short_dgt)	; // 길이 에라
	same => n, GotoIf($[${LEN(${SELNUM})} = ${length}]?WGCN_check_dgt)

	same => n(WGCN_wrong), Set(ErrCode=WGCN_wrong)
	same => n, Playback(comm/COMM_010)				; 잘못 눌렀습니다.
	same => n, Set(countWRONG=$[${countWRONG}+1])
	same => n, GotoIf($[${countWRONG} < 3]?:WGCN_fail)
	same => n, Goto(WGCN_recvDgt)

	same => n(WGCN_short_dgt), Set(ErrCode=WGCN_short_dgt)
	same => n, Playback(comm/COMM_013)				; 입력 정보의 자릿수가 맞지 않습니다.
	same => n, Set(countSHORT=$[${countSHORT}+1])
	same => n, GotoIf($[${countSHORT} < 3]?:WGCN_fail)
	same => n, Goto(WGCN_recvDgt)

	same => n(WGCN_not_enter), Set(ErrCode=WGCN_not_enter)
	same => n, Playback(comm/COMM_011)				; 입력된 정보가 없습니다.
	same => n, Goto(WGCN_fail)

	same => n(WGCN_error), Set(ErrCode=WGCN_error)
	same => n, Playback(${wavDIR}/WGP_027)				; 신용 카드 번호는 숫자만 입력하여야 합니다.
	same => n, Set(countERROR=$[${countERROR}+1])
	same => n, GotoIf($[${countERROR} < 3]?:WGCN_fail)
	same => n, Goto(WGCN_recvDgt)

	same => n(WGCN_check_dgt), Set(ErrCode=WGCN_check_dgt)
	same => n, GoSub(comm_CheckValidDigit,s,1(${ErrCode},${SELNUM}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WGCN_error)

	same => n(WGCN_check_seq), Set(ErrCode=WGCN_check_seq)
	same => n, ExecIf($[${seq_num} = 1]?Set(m_1_SectNumber=${SELNUM}))
	same => n, ExecIf($[${seq_num} = 2]?Set(m_2_SectNumber=${SELNUM}))
	same => n, ExecIf($[${seq_num} = 3]?Set(m_3_SectNumber=${SELNUM}))
	same => n, ExecIf($[${seq_num} = 4]?Set(m_4_SectNumber=${SELNUM}))

	same => n(next), Noop(------ seq_num=${seq_num} [${m_1_SectCnt},${m_2_SectCnt},${m_3_SectCnt},${m_4_SectCnt}] / [${m_1_SectNumber},${m_2_SectNumber},${m_3_SectNumber},${m_4_SectNumber}] ) 

	same => n, Set(seq_num=$[${seq_num}+1])
	same => n, GotoIf($[${seq_num} < 5]?WGCN_init)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGCN_succ), Return(1)
	same => n(WGCN_fail), Return(0)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_GetCardNumber/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_GetValidThru                                                               *
;   신용카드에 기재되어 있는 유효기간 정보를 입력받는다.                         *
;   1) input  : none                                                             *
;   2) output : m_ValidThru                                                      *
;                                                                                *
; ********************************************************************************

[wgp_GetValidThru]
exten => s,1,Noop(wgp_GetValidThru from [${ARG1}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode

	same => n, Set(LOCAL(SELNUM)=)
	same => n, Set(LOCAL(countWRONG)=0)
	same => n, Set(LOCAL(countSHORT)=0)
	same => n, Set(LOCAL(countMMERR)=0)
	same => n, Set(LOCAL(countYYERR)=0)

	same => n, Set(LOCAL(month)=0)
	same => n, Set(LOCAL(year)=0)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGVT_recvDgt), Set(ErrCode=WGVT_recvDgt)
	same => n, Read(SELNUM,${wavDIR}/WGP_014,4,n,3,5)		; 신용 카드에 적혀 있는 
	                                                 		; 유효 기간 네자리 정보를 입력하세요.
	same => n, GotoIf($[${LEN(${SELNUM})} = 0]?WGVT_not_enter)	; // 미입력
	same => n, GotoIf($[${LEN(${SELNUM})} < 4]?WGVT_short_dgt)	; // 길이 에라
	same => n, GotoIf($[${LEN(${SELNUM})} = 4]?WGVT_check_dgt)

	same => n(WGVT_wrong), Set(ErrCode=WGVT_wrong)
	same => n, Playback(comm/COMM_010)				; 잘못 눌렀습니다.
	same => n, Set(countWRONG=$[${countWRONG}+1])
	same => n, GotoIf($[${countWRONG} < 3]?:WGVT_fail)
	same => n, Goto(WGVT_recvDgt)

	same => n(WGVT_short_dgt), Set(ErrCode=WGVT_short_dgt)
	same => n, Playback(comm/COMM_013)				; 입력 정보의 자릿수가 맞지 않습니다.
	same => n, Set(countSHORT=$[${countSHORT}+1])
	same => n, GotoIf($[${countSHORT} < 3]?:WGVT_fail)
	same => n, Goto(WGVT_recvDgt)

	same => n(WGVT_month_err), Set(ErrCode=WGVT_month_err)
	same => n, Playback(${wavDIR}/WGP_025)				; 유효 기간 정보에서, 월 정보가 잘못되었습니다.
	same => n, Set(countMMERR=$[${countMMERR}+1])
	same => n, GotoIf($[${countMMERR} < 3]?:WGVT_fail)
	same => n, Goto(WGVT_recvDgt)

	same => n(WGVT_year_err), Set(ErrCode=WGVT_year_err)
	same => n, Playback(${wavDIR}/WGP_026)				; 유효 기간 정보에서, 년도 정보가 잘못되었습니다.
	same => n, Set(countYYERR=$[${countYYERR}+1])
	same => n, GotoIf($[${countYYERR} < 3]?:WGVT_fail)
	same => n, Goto(WGVT_recvDgt)

	same => n(WGVT_not_enter), Set(ErrCode=WGVT_not_enter)
	same => n, Playback(comm/COMM_011)				; 입력된 정보가 없습니다.
	same => n, Goto(WGVT_fail)

	same => n(WGVT_check_dgt), Set(ErrCode=WGVT_check_dgt)
	same => n, GoSub(comm_CheckValidDigit,s,1(${ErrCode},${SELNUM}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WGVT_wrong)

	same => n, Set(month=${SELNUM:0:2})
	same => n, Set(year=${SELNUM:2:2})

	same => n, GotoIf($[${month} < 1]?WGVT_month_err)
	same => n, GotoIf($[${month} > 12]?WGVT_month_err)

	same => n, Set(yy=${STRFTIME(${EPOCH},,%Y)})
	same => n, Set(mm=${STRFTIME(${EPOCH},,%m)})
	same => n, Set(yy=$[${yy}%100])

	same => n, GotoIf($[${year} < ${yy}]?WGVT_year_err)
	same => n, GotoIf($[${year} > $[${yy}+5]]?WGVT_year_err)

	same => n, Set(m_ValidThru=${SELNUM})

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGVT_succ), Return(1)
	same => n(WGVT_fail), Return(0)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_GetValidThru/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_GetAuthNumber                                                              *
;   신용카드에 기재되어 있는 유효기간 정보를 입력받는다.                         *
;   1) input  : none                                                             *
;   2) output : m_ValidThru                                                      *
;                                                                                *
; ********************************************************************************

[wgp_GetAuthNumber]
exten => s,1,Noop(wgp_GetAuthNumber from [${ARG1}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode

	same => n, Set(LOCAL(SELNUM)=)
	same => n, Set(LOCAL(countWRONG)=0)
	same => n, Set(LOCAL(countSHORT)=0)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGAN_recvDgt), Set(ErrCode=WGAN_recvDgt)
	same => n, Read(SELNUM,${wavDIR}/WGP_018,12,n,3,5)		; 결제 취소를 원하는 승인 번호를 입력하시고
	                                                 		; #버튼을 눌러주세요.
	same => n, GotoIf($[${LEN(${SELNUM})} = 0]?WGAN_not_enter)	; // 미입력
	same => n, GotoIf($[${LEN(${SELNUM})} < 5]?WGAN_short_dgt)	; // 길이 에라
	same => n, Goto(WGAN_check_dgt)

	same => n(WGAN_wrong), Set(ErrCode=WGAN_wrong)
	same => n, Playback(comm/COMM_010)				; 잘못 눌렀습니다.
	same => n, Playback(${wavDIR}/WGP_028)				; 승인 번호에는 숫자만 입력하여야 합니다.
	same => n, Set(countWRONG=$[${countWRONG}+1])
	same => n, GotoIf($[${countWRONG} < 3]?:WGAN_fail)
	same => n, Goto(WGAN_recvDgt)

	same => n(WGAN_short_dgt), Set(ErrCode=WGAN_short_dgt)
	same => n, Playback(${wavDIR}/WGP_029)				; 승인 번호는 5자리 이상 입력하여야 합니다.
	same => n, Set(countSHORT=$[${countSHORT}+1])
	same => n, GotoIf($[${countSHORT} < 3]?:WGAN_fail)
	same => n, Goto(WGAN_recvDgt)

	same => n(WGAN_not_enter), Set(ErrCode=WGAN_not_enter)
	same => n, Playback(comm/COMM_011)				; 입력된 정보가 없습니다.
	same => n, Goto(WGAN_fail)

	same => n(WGAN_check_dgt), Set(ErrCode=WGAN_check_dgt)
	same => n, GoSub(comm_CheckValidDigit,s,1(${ErrCode},${SELNUM}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WGAN_wrong)

	same => n, Set(m_AuthNumber=${SELNUM})
	same => n, Goto(WGAN_succ)


	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WGAN_succ), Return(1)
	same => n(WGAN_fail), Return(0)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_GetAuthNumber/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_SaveAnmMenu                                                                *
;   결제 신청을 한 고객의 신용카드 정보를 DB에 저장할지를 질의                   *
;   1) input  : none                                                             *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_SaveAnmMenu]
exten => s,1,Noop(wgp_SaveAnmMenu from [${ARG1}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})
	same => n, Set(LOCAL(SELNUM)=)
	same => n, Set(LOCAL(countWRONG)=0)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSAM_recvDgt), Set(ErrCode=WSAM_recvDgt)
	same => n, Read(SELNUM,${wavDIR}/WGP_031,1,n,3,5)	; 카드정보를 저장하여 다음 이용시 사용하려면 1번을 누르세요.
	                                                 	; 저장된 카드 번호는 이 전화 번호만 사용할 수 있습니다.
	same => n, GotoIf($[${LEN(${SELNUM})} = 0]?WSAM_not_enter)	; // 미입력
	same => n, GotoIf($["${SELNUM}" = "1"]?WSAM_save)

	same => n(WSAM_wrong), Set(ErrCode=WSAM_wrong)
	same => n, Playback(comm/COMM_010)			; 잘못 눌렀습니다.
	same => n, Set(countWRONG=$[${countWRONG}+1])
	same => n, GotoIf($[${countWRONG} < 3]?:WSAM_end)
	same => n, Goto(WSAM_recvDgt)

	same => n(WSAM_not_enter), Set(ErrCode=WSAM_not_enter)
	same => n, Playback(comm/COMM_011)			; 입력된 정보가 없습니다.
	same => n, Return(0)					l // save_not_select

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSAM_save), Return(1)				; // save_yes
	same => n(WSAM_end), Return(2)				; // save_no


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_SaveAnmMenu/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_AnmInputInfo                                                               *
;   입력된 정보를 고객에게 다시 안내                                             *
;   1) input  : none                                                             *
;        - CallType : 1=카드번호 + 유효기간 + 결제금액                           *
;                     2=카드번호 + 유효기간                                      *
;                     3=카드번호 + 유효기간                                      *
;                     4=카드번호 + 유효기간 + 승인번호                           *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_AnmInputInfo]
exten => s,1,Noop(wgp_AnmInputInfo from [${ARG1}/${ARG2}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode
	same => n, Set(LOCAL(CallTyp)=${ARG2})				; // 1=카드+기간+금액,2/3=카드+기간,4=카드+기간+승인
	same => n, Set(LOCAL(totCount)=$[${m_1_SectCnt}+${m_2_SectCnt}+${m_3_SectCnt}+${m_4_SectCnt}])

	same => n, Playback(${wavDIR}/WGP_020)				; 고객님께서 입력하신

	same => n, GotoIf($[${totCount}} = 0]?vt)
	same => n, Playback(${wavDIR}/WGP_021)				; 카드 번호.
	same => n, GotoIf($[${LEN(${m_1_SectNumber})} = 0]?s2)

	same => n(s1),GotoIf($[${m_1_SectCnt} = 0]?s2)
	same => n, Playback(${wavDIR}/WGP_021_1)			; 첫번째 부분은.
	same => n, SayDigits(${m_1_SectNumber})				; xxxx
	same => n, GotoIf($[${LEN(${m_2_SectNumber})} = 0]?s3)

	same => n(s2),GotoIf($[${m_2_SectCnt} = 0]?s3)
	same => n, Playback(${wavDIR}/WGP_021_2)			; 두번째 부분은.
	same => n, SayDigits(${m_2_SectNumber})				; xxxx
	same => n, GotoIf($[${LEN(${m_3_SectNumber})} = 0]?s4)

	same => n(s3),GotoIf($[${m_3_SectCnt} = 0]?s4)
	same => n, Playback(${wavDIR}/WGP_021_3)			; 세번째 부분은.
	same => n, SayDigits(${m_3_SectNumber})				; xxxx
	same => n, GotoIf($[${LEN(${m_4_SectNumber})} = 0]?s5)

	same => n(s4),GotoIf($[${m_4_SectCnt} = 0]?s5)
	same => n, Playback(${wavDIR}/WGP_021_4)			; 네번째 부분은.
	same => n, SayDigits(${m_4_SectNumber})				; xxxx

	same => n(s5), Playback(${comDIR}/COMM_024)			; 이고,

	same => n(vt), Playback(${wavDIR}/WGP_022)			; 유효 기간은
	same => n, SayDigits(${m_ValidThru})				; xxxx

	same => n, GotoIf($[${CallTyp} = 2]?end)
	same => n, GotoIf($[${CallTyp} = 3]?end)
	same => n, GotoIf($[${CallTyp} = 4]?auth)

	same => n, Playback(${comDIR}/COMM_025)				; 이며,
	same => n, Playback(${wavDIR}/WGP_023)				; 결제 금액은
	same => n, GoSub(readNumber,s,1(${m_PayAmount},W))		; xxx,xxx원
	same => n, Goto(end)

	
	same => n(auth), Playback(${comDIR}/COMM_025)			; 이며,
	same => n, Playback(${wavDIR}/WGP_024)				; 결제 취소를 원하는 승인번호는
	same => n, SayDigits(${m_AuthNumber})				; xxxxxxxx

	same => n(end), Playback(${comDIR}/COMM_022)			; 입니다.
	same => n, Return



exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_AnmInputInfo/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_VariousInformMenu                                                          *
;   신용카드 결제신청/정보저장/정보삭제/결제취소 ARS 메뉴                        *
;   1) input  : CallType(1=request_pay,2=save_menu,3=delete_menu,4=cancel_pay)   *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_VariousInformMenu]
exten => s,1,Noop(wgp_VariousInformMenu from [${ARG1}/${ARG2}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})				; // ErrCode
	same => n, Set(LOCAL(CallType)=${ARG2})				; 1=reqpay_menu,2=save_menu,3=del_menu,4=can_menu
	same => n, Set(LOCAL(SELNUM)=)
	same => n, Set(LOCAL(countWRONG)=0)
	same => n, Set(LOCAL(FN)=)

	same => n, ExecIf($[${CallType}=1]?Set(FN=WGP_030))		; 결제는 1번. ~~~
	same => n, ExecIf($[${CallType}=2]?Set(FN=WGP_032))		; 저장은 1번. ~~~
	same => n, ExecIf($[${CallType}=3]?Set(FN=WGP_033))		; 삭제는 1번. ~~~
	same => n, ExecIf($[${CallType}=4]?Set(FN=WGP_034))		; 결제 취소는 1번. ~~~

	same => n(WVIM_listen_again), Set(ErrCode=WVIM_listen_again)
	same => n, GoSub(wgp_AnmInputInfo,s,1(${ErrCode},${CallType}))

	same => n(WVIM_recvDgt), Set(ErrCode=WVIM_recvDgt)
	same => n, Read(SELNUM,${wavDIR}/${FN},1,n,3,5)			; 결제는/저장은/삭제는/결제 취소는 1번.
	                                                 		; 입력정보 변경은 2번. 
	                                                 		; 다시 듣기는 0번을 누르세요.

	same => n, GotoIf($[${LEN(${SELNUM})} = 0]?WVIM_not_enter)	; // 미입력
	same => n, GotoIf($[${SELNUM} = 0]?WVIM_listen_again)
	same => n, GotoIf($[${SELNUM} = 1]?WVIM_1)
	same => n, GotoIf($[${SELNUM} = 2]?WVIM_2)

	same => n(WVIM_wrong), Set(ErrCode=WVIM_wrong)
	same => n, Playback(comm/COMM_010)				; 잘못 눌렀습니다.
	same => n, Set(countWRONG=$[${countWRONG}+1])
	same => n, GotoIf($[${countWRONG} < 3]?:WVIM_0)
	same => n, Goto(WVIM_recvDgt)

	same => n(WVIM_not_enter), Set(ErrCode=WVIM_not_enter)
	same => n, Playback(comm/COMM_011)				; 입력된 정보가 없습니다.
	same => n, Goto(WVIM_0)

	same => n(WVIM_0), Return(0)	; // fail
	same => n(WVIM_1), Return(1)	; // succ
	same => n(WVIM_2), Return(2)	; // change


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_VariousInformMenu/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_SetCardInform                                                              *
;   신용카드 번호, 유효기간 입력후 결제 시도                                     *
;   1) input  : none                                                             *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_SetCardInform]
exten => s,1,Noop(wgp_SetCardInform from [${ARG1}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSCI_init), Set(ErrCode=WSCI_init)
	same => n, Set(m_1_SectNumber=)
	same => n, Set(m_2_SectNumber=)
	same => n, Set(m_3_SectNumber=)
	same => n, Set(m_4_SectNumber=)
	same => n, Set(m_ValidThru=)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSCI_recvCCN), Set(ErrCode=WSCI_recvCCN)
	same => n, GoSub(wgp_GetCardNumber,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WSCI_fail)

	same => n(WSCI_recvCCVT), Set(ErrCode=WSCI_recvCCVT)
	same => n, Wait(0.5)
	same => n, GoSub(wgp_GetValidThru,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WSCI_fail)

	same => n, GoSub(wgp_VariousInformMenu,s,1(${ErrCode},1))	; // 1=reqpay_menu,2=save_menu,3=del_menu,4=can_menu
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WSCI_fail)
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?:WSCI_init)

	same => n(WSCI_pay), Set(ErrCode=WSCI_pay)
	same => n, GoSub(wgp_AgiCreditCardPayReq,s,1(${ErrCode}))
	same => n, Set(rValue=${GOSUB_RETVAL})

	same => n, GoSub(wgp_PlayAnm,s,1(${ErrCode},${GOSUB_RETVAL}))
	same => n, GoSubIf($[${rValue} == 1100]?wgp_SaveCardInform,s,1(${ErrCode},1))		; // 1=pay_save 

	same => n, GotoIf($[${rValue} = 1100]?WSCI_succ:WSCI_fail)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSCI_succ), Return(1)
	same => n(WSCI_fail), Return(0)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_SetCardInform/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_SaveCardInform                                                             *
;   신용카드 정보 저장                                                           *
;   1) input  : SaveType(1=pay_save, 2=web_save)                                 *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_SaveCardInform]
exten => s,1,Noop(wgp_SaveCardInform from [${ARG1}/${ARG2}] )

	same => n, Set(LOCAL(ErrCode)=${ARG1})		; // ErrCode
	same => n, Set(LOCAL(SaveType)=${ARG2} )	; // 1=pay_save 2=web_save

	same => n, GotoIf($[${SaveType} = 1]?WSVI_pay_save)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSVI_init), Set(ErrCode=WSVI_init)
	same => n, Set(m_1_SectNumber=)
	same => n, Set(m_2_SectNumber=)
	same => n, Set(m_3_SectNumber=)
	same => n, Set(m_4_SectNumber=)
	same => n, Set(m_ValidThru=)

	same => n(WSVI_recvCCN), Set(ErrCode=WSVI_recvCCN)
	same => n, GoSub(wgp_GetCardNumber,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WSVI_end)

	same => n(WSVI_recvCCVT), Set(ErrCode=WSVI_recvCCVT)
	same => n, Wait(0.5)
	same => n, GoSub(wgp_GetValidThru,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WSVI_end)

	same => n, GoSub(wgp_VariousInformMenu,s,1(${ErrCode},2))	; // 1=reqpay_menu,2=save_menu,3=del_menu,4=can_menu
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WSVI_end)
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?:WSVI_init)

	same => n, GoSub(wgp_AgiCheckCreditCard,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} != 1011]?stop)
	same => n, Gosub(wgp_AgiSaveCreditCardInform,s,1($ErrCode}))

	same => n(stop), GoSub(wgp_PlayAnm,s,1(${ErrCode},${GOSUB_RETVAL}))
	same => n, Goto(WSVI_end)

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSVI_pay_save), Set(ErrCode=WSVI_pay_save)

	same => n, GoSub(wgp_AgiCheckCreditCard,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} != 1011]?WSVI_end)

	same => n, GoSub(wgp_SaveAnmMenu,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} != 1]?WSVI_end)

	same => n, Gosub(wgp_AgiSaveCreditCardInform,s,1($ErrCode}))
	same => n, GoSub(wgp_PlayAnm,s,1(${ErrCode},${GOSUB_RETVAL}))

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WSVI_end), Return(1)

exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_SaveCardInform/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_DelCardInform                                                              *
;   등록된 신용카드 정보 삭제                                                    *
;   1) input  : none                                                             *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_DelCardInform]
exten => s,1,Noop(wgp_DelCardInform from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})		; // ErrCode

	; ----------------------------------------
	;                                         
	; ----------------------------------------
	same => n(WDCI_init), Set(ErrCode=WDCI_init)
	same => n, Set(m_1_SectNumber=)
	same => n, Set(m_2_SectNumber=)
	same => n, Set(m_3_SectNumber=)
	same => n, Set(m_4_SectNumber=)
	same => n, Set(m_ValidThru=)

	same => n(WDCI_recvCCN), Set(ErrCode=WDCI_recvCCN)
	same => n, GoSub(wgp_GetCardNumber,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WDCI_end)

	same => n(WDCI_recvCCVT), Set(ErrCode=WDCI_recvCCVT)
	same => n, Wait(0.5)
	same => n, GoSub(wgp_GetValidThru,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WDCI_end)

	; ----------------------------------------
	; 입력 정보 안내                                
	; ----------------------------------------
	same => n, GoSub(wgp_VariousInformMenu,s,1(${ErrCode},3))	; // 1=reqpay_menu,2=save_menu,3=del_menu,4=can_menu
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WDCI_end)
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?:WDCI_init)

	same => n, GoSub(wgp_AgiCheckCreditCard,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} != 1010]?stop)
	same => n, Gosub(wgp_AgiDeleteCreditCardInform,s,1($ErrCode}))

	same => n(stop), GoSub(wgp_PlayAnm,s,1(${ErrCode},${GOSUB_RETVAL}))
	same => n, Goto(WDCI_end)

	same => n(WDCI_end), Return(1)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_DelCardInform/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()





; ********************************************************************************
;                                                                                *
; wgp_ReqPayCancel                                                               *
;   결제 취소 신청                                                               *
;   1) input  : none                                                             *
;   2) output : none                                                             *
;                                                                                *
; ********************************************************************************

[wgp_ReqPayCancel]
exten => s,1,Noop(wgp_ReqPayCancel from [${ARG1}] )
	same => n, Set(LOCAL(ErrCode)=${ARG1})		; // ErrCode

	; ----------------------------------------
	; 정보 입력 : 카드번호, 유효기간, 승인번호                 
	; ----------------------------------------
	same => n(WRPC_init), Set(ErrCode=WRPC_init)
	same => n, Set(m_AuthNumber=)

	same => n(WRPC_recvCCN), Set(ErrCode=WRPC_recvCCN)
	same => n, GoSub(wgp_GetCardNumber,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WRPC_end)

	same => n(WRPC_recvCCVT), Set(ErrCode=WRPC_recvCCVT)
	same => n, Wait(0.5)
	same => n, GoSub(wgp_GetValidThru,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WRPC_end)

	same => n(WRPC_recvAN), Set(ErrCode=WRPC_recvAN)
	same => n, Wait(0.5)
	same => n, GoSub(wgp_GetAuthNumber,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WRPC_end)

	; ----------------------------------------
	; 메뉴 안내                                   
	; ----------------------------------------
	same => n, GoSub(wgp_VariousInformMenu,s,1(${ErrCode},4))	; // 1=reqpay_menu,2=save_menu,3=del_menu,4=can_menu
	same => n, GotoIf($[${GOSUB_RETVAL} = 0]?WRPC_end)
	same => n, GotoIf($[${GOSUB_RETVAL} = 1]?:WRPC_init)

	; ----------------------------------------
	; 신용카드 등록 상태 확인                           
	; ----------------------------------------
	same => n, GoSub(wgp_AgiCheckCreditCard,s,1(${ErrCode}))
	same => n, GotoIf($[${GOSUB_RETVAL} != 1010]?stop)

	; ----------------------------------------
	; 신용카드 결제 정보 취소 요청                        
	; ----------------------------------------
	same => n, GoSub(wgp_AgiCancelCardAuthInform,s,1(${ErrCode}))

	same => n(stop), GoSub(wgp_PlayAnm,s,1(${ErrCode},${GOSUB_RETVAL}))
	same => n(WRPC_end), Return(1)


exten => h,1, Log(NOTICE,WGP [${m_CALLER} --> ${m_CALLEE}] wgp_ReqPayCancel/Hangup ERR=[${ErrorCode} ${ErrCode}] )
	same => n, Hangup()
